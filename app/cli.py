import ast
import sys
import click
import pandas as pd
import sqlalchemy as sa
from flask import Blueprint, current_app
from app import db
from app.models import Vendor, User
from app.utils import simple_lower_ascii
from app.shop.bulk_processing import async_update_db

bp = Blueprint('cli', __name__)

# TODO: refactor shop cli commands to a module inside app/shop
@bp.cli.command('add-vendors-from-products')
@click.argument('csv_path')
def add_vendors_from_products(csv_path):
    '''
    Load vendors from a CSV file into the db. 
    Meant for use with Shopify CSV product exports
    '''
    df = pd.read_csv(csv_path)

    # Remove rows if vendor is nan/empty
    df = df.dropna(subset=['Vendor'])
    df = df[df['Vendor'].str.strip() != '']

    vendors = df['Vendor'].unique()
    for name in vendors:
        print(f"Adding '{name}'...")
        conflicting_vendor = db.session.scalar(sa.select(Vendor).where(Vendor.compare_name == simple_lower_ascii(name)))
        if not conflicting_vendor:
            new_vendor = Vendor()
            new_vendor.set_name(name)
            db.session.add(new_vendor)

        else:
            existing_vendor = db.session.scalar(sa.select(Vendor).where(Vendor.name == name))
            if existing_vendor:
                continue
            else: 
                print(f"Failed to add {name} because there is already a vendor with a similar name: {conflicting_vendor.name}.")
                print(f"Which name do you want to keep?\n  1. {conflicting_vendor.name}\n  2. {name}")

                while True:
                    user_input = input("Enter 1 or 2: ").strip()
                    if user_input in {"1", "2"}:
                        break
                    print("Invalid input.")

                if user_input == "1":
                    continue
                elif user_input == "2":
                    conflicting_vendor.name = name
                    db.session.add(conflicting_vendor)

        db.session.commit()

    print('Vendors added successfully.')

@bp.cli.command('add-vendors-from-list')
@click.argument('csv_path')
def add_vendors_from_list(csv_path):
    '''
    Load vendors from a CSV file into the db. 
    Meant for use with data generated by the bulk_processing script.
    '''
    df = pd.read_csv(csv_path)

    # Remove rows if vendor is nan/empty
    df = df.dropna(subset=['vendor'])
    df = df[df['vendor'].str.strip() != '']

    for i, row in df.iterrows():
        vendor_name = row['vendor']
        print(f"Adding vendor {vendor_name}...")
        vendor_compare_name = simple_lower_ascii(vendor_name)
        conflicting_vendor = db.session.scalar(sa.select(Vendor).where(Vendor.compare_name == vendor_compare_name))
        if not conflicting_vendor:
            new_vendor = Vendor()
            new_vendor.set_name(vendor_name)
            new_vendor.pueblos_estados_shopify = row['towns']

            towns_list = ast.literal_eval(row["towns"])
            
            if len(towns_list) == 0:
                pass
            elif len(towns_list) == 1 and vendor_compare_name not in ['x', 'anon', 'anonimo']:
                try:
                    new_vendor.set_pueblo(towns_list[0][0])
                    new_vendor.set_estado(towns_list[0][1])
                except:
                    print(f"Error in setting either pueblo to {towns_list[0][0]} or estado to {towns_list[0][1]}")

            elif vendor_compare_name in ['x', 'anon', 'anonimo']:
                print(f'"{vendor_name}" added to vendor list but will not add pueblo/estado to anonymous vendors')
            
            else:
                print("There are multiple estados/pueblos for this vendor.\nChoose which to keep as default or choose not to add a default.")
                print('Options:\n   0. Do not set a default\n   ' + '\n   '.join( 
                    [f'{i+1}. {towns_list[i][0]}, {towns_list[i][1]}' for i in range(len(towns_list))] 
                ))
                while True:
                    ans = input('Please select the default value: ')
                    try:
                        ans = int(ans)
                    except ValueError:
                        print('invalid input')
                        continue

                    if ans not in range(len(towns_list) + 1):
                        print('invalid input')
                        continue
                    elif ans > 0:
                        pueblo = towns_list[ans - 1][0]
                        estado = towns_list[ans -1 ][1]
                        new_vendor.set_pueblo(pueblo)
                        new_vendor.set_estado(estado)
                    break


            db.session.add(new_vendor)

        else:
            existing_vendor = db.session.scalar(sa.select(Vendor).where(Vendor.name == vendor_name))
            if existing_vendor:
                continue
            else: 
                print(f"Failed to add {vendor_name} because there is already a vendor with a similar name: {conflicting_vendor.name}.")
                print(f"Which name do you want to keep?\n  1. {conflicting_vendor.name}\n  2. {vendor_name}")

                while True:
                    user_input = input("Enter 1 or 2: ").strip()
                    if user_input in {"1", "2"}:
                        break
                    print("Invalid input.")

                if user_input == "1":
                    continue
                elif user_input == "2":
                    conflicting_vendor.name = vendor_name
                    db.session.add(conflicting_vendor)

        db.session.commit()

    print('Vendors added successfully.')

#TODO return non 0 to terminal
@bp.cli.command('create-default-admin')
def create_admin():
        try:
            if not db.session.scalars(sa.select(User)).first():
                admins = current_app.config.get('ADMINS')
                pwd = current_app.config.get('ADMIN_PWD')

                if not (pwd and admins):
                    current_app.logger.info("FAILED TO SET ADMIN: no admin or no password")
                    sys.exit(1)

                u = User(email=admins[0], is_superadmin=True, failed_logins=0)
                u.set_password(pwd)
                db.session.add(u)
                db.session.commit()
                current_app.logger.info("Admin user created.")
                sys.exit(0)

            else:
                current_app.logger.info("Admin user already exists.")
                sys.exit(0)
        except Exception as e:
            current_app.logger.info(f'there was an error: {e}')
            sys.exit(1)

@bp.cli.command('shopify-sync')
def update_vendors():
    '''
    Asynchronously query shopify via a bulk operation and when the file is ready, 
    update the vendors table.
    '''
    async_update_db()